The VF2 algorithm was introduced by L.P.Cordella, P.Foggiaa, C.Sansone and M.Vento[11]. The algorithm is suitable for graph matching and isomorphic determination, including subgraph isomorphic
determination on large graphs, this is attributed to the Data structures that the algorithm uses and the manner in which they are used[11], this feature is discussed later in the paper.

The algorithm performs the matching process by attempting to find a mapping M, of vertices in graph GA with correspond vertices in graph GB. The mapping is then used to determine if the two
graphs are completely syntactically similar(isomorphic), partially syntactically similar or have no structural similarities at all.
The M is defined as a set of pairs (n,m), where n is a vertice from GA and m a vertice from GB, thus n<=GA and m<=GB.
The isomorphism determining properties of the mapping are defiined as follows, a mapping M < NA X NB is isomorphic iff M is a bijection, that preserves the branching structure of GA and GB, where
NA is a set of vertices from GA and NB a set of vertices from GB.
The mapping M < NA X NB is subgraph isomorphic iff M is isomorphic to GA and a subgraph of GB.

The mapping M comprises of state based partial solution morphisms M(s) for each state s.The process of finding the mapping M that is described above uses State Space Representations(SSR)[12].
The partial solution morphisms M(s) selects two subgraphs from GA and GB, namely GA(s) and GB(s) respectively. The subgraphs comprises of only vertices that are presesnt in the partial solution M(s) for the state s as well as
the edges joining them together.

The algorithm starts with an initial state s0 that has no mapping between the two graphs, thus M(s0)= NULL. The algorithm then computes a set of candidate pairs P(s). Each candidate p in the set is checked against the feasibility function, if p is successful then it is added to the state s. And
the successor s' is computed usind a combination of the predecessor state and the candidate p, thus s' = s \/ p. The process of generating successor states is a recursive procedure that makes use of the depth first traversal for graphs. When a path has been 
exhausted and a solution has not yet been found, the algorithm uses backtracking to explore the alternative paths[11,13].

The VF2 algorithm generates the states will close consideration that only some of the states are consistant with the desired morphisms[12]. The algorithm avoids inconsistant states by making use 
of a set of rules in it's state generation procedure, thus ensuring that only consistant state are generated, these rules are refered to as feasibility rules. The algorithm uses a function called a feasibility function to test that an 
additon of a pair(n,m) to a state will be consistant. It the addtion of the pair passes all the feasibility rules the algorithm will return a true value, if not, a false value indicating that the procedure results in an inconsistant successor  state s'.
A further filter can be applied in the consistent states to rule out those states whose successor states will be inconsistant, this apporoach is employed by adding a additional rules called k-look-ahead rules[12]. They check to see if the current state s will have a consistant successor after
k steps, i.e. they check to see if the states from s to s(pow(k)) are consistant with the desired morphisms.

Condidate Pairs

The condidate pairs are obtained by considering the vertices that are connect to GA(s) and GB(s), the subgraphs of GA and GB in the state s. The vertices are used to form the pairs (n,m) as defined
above. In order explain how the pairs are formed, we must first introduce the following defintions:
Let TAin(s) be the set of vertices that are not yet in the partial mapping M(s) and are the origin of the edges from graph GA
	TBin(s) be the set of vertices that are not yet in the partial mapping M(s) and are the origin of the edges from graph GB
	TAout(s) be the set of vertices that are not yet in the partial mapping M(s) and are the destination of the edges from graph GA
	TBout(s) be the set of vertices that are not yet in the partial mapping M(s) and are the destination of the edges from graph GB
	
The pair (n,m) is made by vertice n from TAout(s) and m from TBout(s). If the any of the sets is empty, then we consider the vertice n from TAin(s) and m from TBin(s). In the case where that graphs are 
not connected, the pairs will be made by all the vertice not yet contained in either GA(s) and GB(s). These pairs form the entries in the set P(s) for that respective state s.

The feasibility rules

The feasibility rules that are used to insure that the states that are evaluated play a role in the improving the performance, by preventing inconsistant states from being explored and thus optimizing the
excution of the algorithm. There are five general feasibility rules defined as Rpred,Rsucc,Rin,Rout and Rnew repectively. A more formal defination is as follows
[INSERT ALL THE FEASIBILITY RULES]

The feasibility functions check for two main things, firstly they check the consistancy of the partial solution in the succssor state s', namely M(s'). Rules Rpred and Rsucc are the rules used for this checking.
The remaining rules are used for preunning the search space for different levels of look ahead. The Rin and Rout are used to look ahead one level and determine which of those successor state are constistant,
and Rnew is used for the same purpose, but for a look ahead level of two.

This brings use to the conclusion that, in order for a state to be considered consistant it must pass a combination of all of the five rules, namely:
[INSERT THE RULE]
Which, as described earlier is defined as the feasibility function.